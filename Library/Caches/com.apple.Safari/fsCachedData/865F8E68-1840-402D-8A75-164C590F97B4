<!DOCTYPE html>
<html lang="en">
<head>
    <title>Using NSURLConnection</title>
    <meta http-equiv="X-UA-Compatible" content="IE=7">
    <meta charset="utf-8">
    <meta id="book-resource-type" name="book-resource-type" content="Guide">
    <meta scheme="apple_ref" id="identifier" name="identifier" content="//apple_ref/doc/uid/10000165i">
    <meta id="document-version" name="document-version" content="3.2.221">
    <meta id="build" name="build" content="229b85e266ccdf3c59ef214e66cbbbeb" />
    <meta id="chapterId" name="chapterId" content="20001836">
    <meta id="date" name="date" content="2013-10-22">
    <meta id="description" name="description" content="Explains how to manipulate URLs and transfer URL contents.">
    <meta id="book-title" name="book-title" content="URL Session Programming Guide">
    <meta id="book-root" name="book-root" content="../">
    <meta id="book-json" name="book-json" content="../book.json">
    <meta id="devcenter" name="devcenter" content="Mac Dev Center">
    <meta id="devcenter-url" name="devcenter-url" content="http://developer.apple.com/devcenter/mac">
    <meta id="reflib" name="reflib" content="Mac Developer Library">
    <meta id="book-assignments" name="book-assignments" content="{Type/Guide}, {Framework/Core Services Layer/Foundation}, {Topic/Networking, Internet, & Web/Protocol Streams}">
    <meta name="pdf" contents="../URLLoadingSystem.pdf" /><link id="book-pdf" media="print" rel="alternate" type="application/pdf" href="../URLLoadingSystem.pdf" />
    
    <meta id="copyright" name="copyright" content="Copyright 2015 Apple Inc. All Rights Reserved.">
    <meta id="xcode-display" name="xcode-display" content="render">
    <meta id="IndexTitle" name="IndexTitle" content="URL Session Programming Guide: Using NSURLConnection">
    <meta id="resources-uri" name="resources-uri" content="../../../../../Resources/1118">
    <link id="book-index-page" rel="Start" title="URL Session Programming Guide" type="text/html" href="../index.html">
    <link id="next-page" rel="Next" type="text/html" href="UsingNSURLDownload.html">
    <link id="previous-page" rel="Prev" type="text/html" href="../Articles/UsingNSURLSession.html">
    <link rel="stylesheet" type="text/css" href="../../../../../Resources/1118/CSS/screen.css">
    
    <!-- xcode_css -->
    <link rel="stylesheet" type="text/css" href="../../../../../Resources/1118/CSS/feedback.css">
</head>    
<body><a name="//apple_ref/doc/uid/20001836" title="Using NSURLConnection"></a>
    <div id="_omniture_top">
    <!-- SiteCatalyst code version: H.8. Copyright 1997-2006 Omniture, Inc. -->
    <script type="text/javascript">
    /* RSID: */
    var s_account="appleglobal,appleusdeveloper"
    </script>

    <script type="text/javascript" src="https://www.apple.com/metrics/scripts/s_code_h.js"></script>
    <script type="text/javascript">
    s.pageName=AC.Tracking.pageName();
    s.channel="www.us.developer"

    /************* DO NOT ALTER ANYTHING BELOW THIS LINE ! **************/
    var s_code=s.t();if(s_code)document.write(s_code)</script>
    <!-- End SiteCatalyst code version: H.8. -->
    </div>

    <div id="adcHeader" class="hideOnPrint hideInXcode">
        <div id='ssi_Header' class="hideInXcode mac">
            <a id="ssi_LibraryTitle" href='../../../../../navigation/'>Mac Developer Library</a>
            <a id="ssi_AppleDeveloperConnection" href='https://developer.apple.com/'>Developer</a>
            <div id='ssi_SearchButton' role="button" title="Search">Search</div>
        </div>
        <form id='ssi_SearchMenu' method='get' action='../../../../../search/' accept-charset='utf-8'>
            <label for='adcsearch'>Search Mac Developer Library</label>
            <input type='search' id='ssi_SearchField' name='q' accesskey='s' results='5' />
        </form>
    </div>

    <header id="header">
        <div id="title" role="banner">
            <h1>URL Session Programming Guide</h1>
            <span id="file_links">
                <a id="PDF_link" role="button" tabindex='4' rel="alternate" title="Download PDF"><span id="pdf_icon"></span>PDF</a>
                <a id="Companion_link" role="button" tabindex='3' title="Download Companion File"><span id="companion_icon"></span>Companion File</a>
            </span>
        </div>
        <ul id="headerButtons" class="hideOnPrint" role="toolbar">
            <li id="toc_button" style="display:none">
                <button tabindex="5" id="table_of_contents" class="open" role="checkbox" aria-label="Show Table of Contents"><span class="disclosure"></span>Table of Contents</button>
            </li>
            <li id="jumpto_button" style="display:none" role="navigation"><select tabindex="6" id="jumpTo"><option value="top">Jump To&#133;</option></select></li>
            <li id="downloadSample_button" style="display:none">
                <a id="Sample_link"><button id="Sample_button">Download Sample Code</button></a>
            </li>
        </ul>
    </header>
    <nav id="tocContainer" tabindex="7">
        <ul id="toc" role="tree"></ul>
    </nav>

    <article id="contents" tabindex="0" role="main">
        <div id="pageNavigationLinks_top" class="pageNavigationLinks">
            <a class='nextLink' rel='next' href='UsingNSURLDownload.html'>Next</a><a class='previousLink' rel='prev' href='../Articles/UsingNSURLSession.html'>Previous</a>
        </div>
        <a id="top" name="top"></a>
        <a id="INDEX" href="../index.html" style="display:none;"></a>
        
        <a name="//apple_ref/doc/uid/20001836-BAJEAIEE" title="Using NSURLConnection"></a><h1 id="pageTitle">Using NSURLConnection</h1><p><code><a href="../../../Reference/Foundation/Classes/NSURLConnection_Class/index.html#//apple_ref/occ/cl/NSURLConnection" data-renderer-version="1" target="_self">NSURLConnection</a></code> provides the most flexible method of retrieving the contents of a URL. This class provides a simple interface for creating and canceling a connection, and supports a collection of <span class="pediaLink" data-header="Delegation" data-contents="Delegation is a simple and powerful pattern in which one object in a program acts on behalf of, or in coordination with, another object. "><a href="../../../../General/Conceptual/DevPedia-CocoaCore/Delegation.html#//apple_ref/doc/uid/TP40008195-CH14" data-renderer-version="1" target="_self">delegate</a></span> methods that provide feedback and control of many aspects of the connection. These classes fall into five categories: URL loading, cache management, authentication and credentials, cookie storage, and protocol support.</p><section><a name="//apple_ref/doc/uid/20001836-170129" title="Creating a Connection"></a><h2 class="jump">Creating a Connection</h2><p>The <code>NSURLConnection</code> class supports three ways of retrieving the content of a URL: synchronously, asynchronously using a completion handler block, and asynchronously using a custom <span class="pediaLink" data-header="Delegation" data-contents="Delegation is a simple and powerful pattern in which one object in a program acts on behalf of, or in coordination with, another object. "><a href="../../../../General/Conceptual/DevPedia-CocoaCore/Delegation.html#//apple_ref/doc/uid/TP40008195-CH14" data-renderer-version="1" target="_self">delegate</a></span> object.</p><p><strong>To retrieve the contents of a URL synchronously:</strong> In code that runs <em>exclusively</em> on a background thread, you can call <code><a href="../../../Reference/Foundation/Classes/NSURLConnection_Class/index.html#//apple_ref/occ/clm/NSURLConnection/sendSynchronousRequest:returningResponse:error:" data-renderer-version="1" target="_self">sendSynchronousRequest:returningResponse:error:</a></code> to perform an HTTP request. This call returns when the request completes or an error occurs. For more details, see <span class="content_text"><a href="#//apple_ref/doc/uid/20001836-SW3" data-renderer-version="1">Retrieving Data Synchronously</a></span>.</p><p><strong>To retrieve the contents of a URL using a completion handler block:</strong> If you do not need to monitor the status of a request, but merely need to perform some operation when the data has been fully received, you can call <code><a href="../../../Reference/Foundation/Classes/NSURLConnection_Class/index.html#//apple_ref/occ/clm/NSURLConnection/sendAsynchronousRequest:queue:completionHandler:" data-renderer-version="1" target="_self">sendAsynchronousRequest:queue:completionHandler:</a></code>, passing a block to handle the results. For more details, see <span class="content_text"><a href="#//apple_ref/doc/uid/20001836-SW1" data-renderer-version="1">Retrieving Data Using a Completion Handler Block</a></span>.</p><p><strong>To retrieve the contents of a URL using a delegate object:</strong> Create a delegate class that implements at least the following delegate methods: <code>connection:didReceiveResponse:</code>, <code>connection:didReceiveData:</code>, <code>connection:didFailWithError:</code>, and <code>connectionDidFinishLoading:</code>. The supported delegate methods are defined in the <code><a href="../../../../Foundation/Reference/NSURLConnectionDelegate_Protocol/index.html#//apple_ref/occ/intf/NSURLConnectionDelegate" data-renderer-version="1" target="_self">NSURLConnectionDelegate</a></code>, <code><!--a target="_self" -->NSURLConnectionDownloadDelegate<!--/a--></code>, and <code><a href="../../../../Foundation/Reference/NSURLConnectionDataDelegate_protocol/index.html#//apple_ref/occ/intf/NSURLConnectionDataDelegate" data-renderer-version="1" target="_self">NSURLConnectionDataDelegate</a></code> protocols.</p><p>The example in <span class="content_text">Listing 2-1</span> initiates a connection for a URL. This snippet begins by creating an <code><a href="../../../Reference/Foundation/Classes/NSURLRequest_Class/index.html#//apple_ref/occ/cl/NSURLRequest" data-renderer-version="1" target="_self">NSURLRequest</a></code> instance for the URL, specifying the cache access policy and the timeout interval for the connection. It then creates an <code>NSURLConnection</code> instance, specifying the request and a delegate. If <code>NSURLConnection</code> can’t create a connection for the request, <code>initWithRequest:delegate:</code> returns <code>nil</code>. The snippet also creates an instance of <code><a href="../../../Reference/Foundation/Classes/NSMutableData_Class/index.html#//apple_ref/occ/cl/NSMutableData" data-renderer-version="1" target="_self">NSMutableData</a></code> to store the data that is incrementally provided to the delegate.</p><a name="//apple_ref/doc/uid/20001836-161568-CJBJIIHH" title="Listing 2-1Creating a connection using NSURLConnection"></a><p class="codesample clear"><a name="//apple_ref/doc/uid/20001836-161568" title="Listing 2-1Creating a connection using NSURLConnection"></a><strong class="caption_number">Listing 2-1</strong>&nbsp;&nbsp;Creating a connection using <code>NSURLConnection</code></p><div class="codesample clear"><table><tr><td scope="row"><pre>// Create the request.<span></span></pre></td></tr><tr><td scope="row"><pre>NSURLRequest *theRequest=[NSURLRequest requestWithURL:[NSURL URLWithString:@"http://www.apple.com/"]<span></span></pre></td></tr><tr><td scope="row"><pre>                        cachePolicy:NSURLRequestUseProtocolCachePolicy<span></span></pre></td></tr><tr><td scope="row"><pre>                    timeoutInterval:60.0];<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>// Create the NSMutableData to hold the received data.<span></span></pre></td></tr><tr><td scope="row"><pre>// receivedData is an instance variable declared elsewhere.<span></span></pre></td></tr><tr><td scope="row"><pre>receivedData = [NSMutableData dataWithCapacity: 0];<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>// create the connection with the request<span></span></pre></td></tr><tr><td scope="row"><pre>// and start loading the data<span></span></pre></td></tr><tr><td scope="row"><pre>NSURLConnection *theConnection=[[NSURLConnection alloc] initWithRequest:theRequest delegate:self];<span></span></pre></td></tr><tr><td scope="row"><pre>if (!theConnection) {<span></span></pre></td></tr><tr><td scope="row"><pre>    // Release the receivedData object.<span></span></pre></td></tr><tr><td scope="row"><pre>    receivedData = nil;<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>    // Inform the user that the connection failed.<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div><p>The transfer starts immediately upon receiving the <code>initWithRequest:delegate:</code> <span class="pediaLink" data-header="Message" data-contents="A message is the name of a method, and any parameters associated with it, that are sent to, and executed by, an object. "><a href="../../../../General/Conceptual/DevPedia-CocoaCore/Message.html#//apple_ref/doc/uid/TP40008195-CH59" data-renderer-version="1" target="_self">message</a></span>. It can be canceled any time before the delegate receives a <code>connectionDidFinishLoading:</code> or <code>connection:didFailWithError:</code> message by sending the connection a <code>cancel</code> message.</p><p>When the server has provided sufficient data to create an <code>NSURLResponse</code> object, the delegate receives a <code>connection:didReceiveResponse:</code> message. The delegate method can examine the provided <code>NSURLResponse</code> object and determine the expected content length of the data, MIME type, suggested filename, and other metadata provided by the server.</p><p>You should be prepared for your delegate to receive the <code>connection:didReceiveResponse:</code> message multiple times for a single connection; this can happen if the response is in multipart MIME encoding. Each time the delegate receives the <code>connection:didReceiveResponse:</code> message, it should reset any progress indication and discard all previously received data (except in the case of multipart responses). The example implementation in <span class="content_text">Listing 2-2</span> simply resets the length of the received data to 0 each time it is called.</p><a name="//apple_ref/doc/uid/20001836-161881-CJBGAECH" title="Listing 2-2Example connection:didReceiveResponse: implementation"></a><p class="codesample clear"><a name="//apple_ref/doc/uid/20001836-161881" title="Listing 2-2Example connection:didReceiveResponse: implementation"></a><strong class="caption_number">Listing 2-2</strong>&nbsp;&nbsp;Example <code>connection:didReceiveResponse:</code> implementation</p><div class="codesample clear"><table><tr><td scope="row"><pre>- (void)connection:(NSURLConnection *)connection didReceiveResponse:(NSURLResponse *)response<span></span></pre></td></tr><tr><td scope="row"><pre>{<span></span></pre></td></tr><tr><td scope="row"><pre>    // This method is called when the server has determined that it<span></span></pre></td></tr><tr><td scope="row"><pre>    // has enough information to create the NSURLResponse object.<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>    // It can be called multiple times, for example in the case of a<span></span></pre></td></tr><tr><td scope="row"><pre>    // redirect, so each time we reset the data.<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>    // receivedData is an instance variable declared elsewhere.<span></span></pre></td></tr><tr><td scope="row"><pre>    [receivedData setLength:0];<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div><p>The delegate is periodically sent <code>connection:didReceiveData:</code> messages as the data is received. The delegate implementation is responsible for storing the newly received data. In the example implementation in <span class="content_text">Listing 2-3</span>, the new data is appended to the NSMutableData object created in <span class="content_text"><a href="#//apple_ref/doc/uid/20001836-161568-CJBJIIHH" data-renderer-version="1">Listing 2-1</a></span>.</p><a name="//apple_ref/doc/uid/20001836-161937-CJBHEGJE" title="Listing 2-3Example connection:didReceiveData: implementation"></a><p class="codesample clear"><a name="//apple_ref/doc/uid/20001836-161937" title="Listing 2-3Example connection:didReceiveData: implementation"></a><strong class="caption_number">Listing 2-3</strong>&nbsp;&nbsp;Example <code>connection:didReceiveData:</code> implementation</p><div class="codesample clear"><table><tr><td scope="row"><pre>- (void)connection:(NSURLConnection *)connection didReceiveData:(NSData *)data<span></span></pre></td></tr><tr><td scope="row"><pre>{<span></span></pre></td></tr><tr><td scope="row"><pre>    // Append the new data to receivedData.<span></span></pre></td></tr><tr><td scope="row"><pre>    // receivedData is an instance variable declared elsewhere.<span></span></pre></td></tr><tr><td scope="row"><pre>    [receivedData appendData:data];<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div><p>You can also use the <code>connection:didReceiveData:</code> method to provide an indication of the connection’s progress to the user. To do this, you must first obtain the expected content length by calling the <code><a href="../../../Reference/Foundation/Classes/NSURLResponse_Class/index.html#//apple_ref/occ/instm/NSURLResponse/expectedContentLength" data-renderer-version="1" target="_self">expectedContentLength</a></code> method on the URL response object in your <code><a href="../../../../Foundation/Reference/NSURLConnectionDataDelegate_protocol/index.html#//apple_ref/occ/intfm/NSURLConnectionDataDelegate/connection:didReceiveResponse:" data-renderer-version="1" target="_self">connection:didReceiveResponse:</a></code> delegate method. If the server does not provide length information, <code>expectedContentLength</code> returns <code><a href="../../../Reference/Foundation/Classes/NSURLResponse_Class/index.html#//apple_ref/c/macro/NSURLResponseUnknownLength" data-renderer-version="1" target="_self">NSURLResponseUnknownLength</a></code>.</p><p>If an error occurs during the transfer, the delegate receives a <code>connection:didFailWithError:</code> message. The <code>NSError</code> object passed as the parameter specifies the details of the error. It also provides the URL of the request that failed in the user info <span class="pediaLink" data-header="Collection" data-contents="A collection is a Foundation framework object whose primary role is to store objects in the form of arrays, dictionaries, and sets. "><a href="../../../../General/Conceptual/DevPedia-CocoaCore/Collection.html#//apple_ref/doc/uid/TP40008195-CH10" data-renderer-version="1" target="_self">dictionary</a></span> using the key <code><a href="../../../Reference/Foundation/Classes/NSError_Class/index.html#//apple_ref/c/data/NSURLErrorFailingURLStringErrorKey" data-renderer-version="1" target="_self">NSURLErrorFailingURLStringErrorKey</a></code>.</p><p>After the delegate receives a <code>connection:didFailWithError:</code> message, it receives no further delegate messages for the specified connection.</p><p>The example in <span class="content_text">Listing 2-4</span> releases the connection, as well as any received data, and logs the error.</p><a name="//apple_ref/doc/uid/20001836-161986-CJBEDGCB" title="Listing 2-4Example connection:didFailWithError: implementation"></a><p class="codesample clear"><a name="//apple_ref/doc/uid/20001836-161986" title="Listing 2-4Example connection:didFailWithError: implementation"></a><strong class="caption_number">Listing 2-4</strong>&nbsp;&nbsp;Example <code>connection:didFailWithError:</code> implementation</p><div class="codesample clear"><table><tr><td scope="row"><pre>- (void)connection:(NSURLConnection *)connection<span></span></pre></td></tr><tr><td scope="row"><pre>  didFailWithError:(NSError *)error<span></span></pre></td></tr><tr><td scope="row"><pre>{<span></span></pre></td></tr><tr><td scope="row"><pre>    // Release the connection and the data object<span></span></pre></td></tr><tr><td scope="row"><pre>    // by setting the properties (declared elsewhere)<span></span></pre></td></tr><tr><td scope="row"><pre>    // to nil.  Note that a real-world app usually<span></span></pre></td></tr><tr><td scope="row"><pre>    // requires the delegate to manage more than one<span></span></pre></td></tr><tr><td scope="row"><pre>    // connection at a time, so these lines would<span></span></pre></td></tr><tr><td scope="row"><pre>    // typically be replaced by code to iterate through<span></span></pre></td></tr><tr><td scope="row"><pre>    // whatever data structures you are using.<span></span></pre></td></tr><tr><td scope="row"><pre>    theConnection = nil;<span></span></pre></td></tr><tr><td scope="row"><pre>    receivedData = nil;<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>    // inform the user<span></span></pre></td></tr><tr><td scope="row"><pre>    NSLog(@"Connection failed! Error - %@ %@",<span></span></pre></td></tr><tr><td scope="row"><pre>          [error localizedDescription],<span></span></pre></td></tr><tr><td scope="row"><pre>          [[error userInfo] objectForKey:NSURLErrorFailingURLStringErrorKey]);<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div><p>Finally, if the connection succeeds in retrieving the request, the delegate receives the <code>connectionDidFinishLoading:</code> message. The delegate receives no further messages for the connection, and the app can release the <code>NSURLConnection</code> object.</p><p>The example implementation in <span class="content_text">Listing 2-5</span> logs the length of the received data and releases both the connection object and the received data.</p><a name="//apple_ref/doc/uid/20001836-162021-CJBDFIAH" title="Listing 2-5Example connectionDidFinishLoading: implementation"></a><p class="codesample clear"><a name="//apple_ref/doc/uid/20001836-162021" title="Listing 2-5Example connectionDidFinishLoading: implementation"></a><strong class="caption_number">Listing 2-5</strong>&nbsp;&nbsp;Example <code>connectionDidFinishLoading:</code> implementation</p><div class="codesample clear"><table><tr><td scope="row"><pre>- (void)connectionDidFinishLoading:(NSURLConnection *)connection<span></span></pre></td></tr><tr><td scope="row"><pre>{<span></span></pre></td></tr><tr><td scope="row"><pre>    // do something with the data<span></span></pre></td></tr><tr><td scope="row"><pre>    // receivedData is declared as a property elsewhere<span></span></pre></td></tr><tr><td scope="row"><pre>    NSLog(@"Succeeded! Received %d bytes of data",[receivedData length]);<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>    // Release the connection and the data object<span></span></pre></td></tr><tr><td scope="row"><pre>    // by setting the properties (declared elsewhere)<span></span></pre></td></tr><tr><td scope="row"><pre>    // to nil.  Note that a real-world app usually<span></span></pre></td></tr><tr><td scope="row"><pre>    // requires the delegate to manage more than one<span></span></pre></td></tr><tr><td scope="row"><pre>    // connection at a time, so these lines would<span></span></pre></td></tr><tr><td scope="row"><pre>    // typically be replaced by code to iterate through<span></span></pre></td></tr><tr><td scope="row"><pre>    // whatever data structures you are using.<span></span></pre></td></tr><tr><td scope="row"><pre>    theConnection = nil;<span></span></pre></td></tr><tr><td scope="row"><pre>    receivedData = nil;<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div><p>This example represents the simplest implementation of a client using <code>NSURLConnection</code>. Additional delegate methods provide the ability to customize the handling of server redirects, authorization requests, and response caching.</p></section><section><a name="//apple_ref/doc/uid/20001836-SW4" title="Making a POST Request"></a><h2 class="jump">Making a POST Request</h2><p>You can make an HTTP or HTTPS POST request in nearly the same way you would make any other URL request (described in <span class="content_text"><a href="../Articles/AuthenticationChallenges.html#//apple_ref/doc/uid/TP40009507-SW2" data-renderer-version="1">An Authentication Example</a></span>). The main difference is that you must first configure the <code><a href="../../../Reference/Foundation/Classes/NSMutableURLRequest_Class/index.html#//apple_ref/occ/cl/NSMutableURLRequest" data-renderer-version="1" target="_self">NSMutableURLRequest</a></code> object you provide to the <code>initWithRequest:delegate:</code> method.</p><p>You also need to construct the body data. You can do this in one of three ways:</p><ul class="ul"><li class="li"><p>For uploading short, in-memory data, you should URL-encode an existing piece of data, as described in <span class="content_text"><a href="../Articles/AuthenticationChallenges.html#//apple_ref/doc/uid/TP40009507-SW7" data-renderer-version="1">Continuing Without Credentials</a></span>.</p></li><li class="li"><p>For uploading file data from disk, call the <code><a href="../../../Reference/Foundation/Classes/NSMutableURLRequest_Class/index.html#//apple_ref/occ/instm/NSMutableURLRequest/setHTTPBodyStream:" data-renderer-version="1" target="_self">setHTTPBodyStream:</a></code> method to tell <code>NSMutableURLRequest</code> to read from an <code><a href="../../../Reference/Foundation/Classes/NSInputStream_Class/index.html#//apple_ref/occ/cl/NSInputStream" data-renderer-version="1" target="_self">NSInputStream</a></code> and use the resulting data as the body content.</p></li><li class="li"><p>For large blocks of constructed data, call <code><a href="../../../../CoreFoundation/Reference/CFStreamConstants/index.html#//apple_ref/c/func/CFStreamCreateBoundPair" data-renderer-version="1" target="_self">CFStreamCreateBoundPair</a></code> to create a pair of streams, then call the <code><a href="../../../Reference/Foundation/Classes/NSMutableURLRequest_Class/index.html#//apple_ref/occ/instm/NSMutableURLRequest/setHTTPBodyStream:" data-renderer-version="1" target="_self">setHTTPBodyStream:</a></code> method to tell <code>NSMutableURLRequest</code> to use one of those streams as the source for its body content. By writing into the other stream, you can send the data a piece at a time.</p><p>Depending on how you handle things on the server side, you may also want to URL-encode the data you send. (For details, see <span class="content_text"><a href="../Articles/AuthenticationChallenges.html#//apple_ref/doc/uid/TP40009507-SW7" data-renderer-version="1">Continuing Without Credentials</a></span>.)</p></li></ul><p>If you are uploading data to a compatible server, the URL loading system also supports the <code>100</code> (Continue) HTTP status code, which allows an upload to continue where it left off in the event of an authentication error or other failure. To enable support for upload continuation, set the <code>Expect:</code> header on the request object to <code>100-continue</code>.</p><p><span class="content_text">Listing 6-1</span> shows how to configure an <code>NSMutableURLRequest</code> object for a POST request.</p><a name="//apple_ref/doc/uid/20001836-SW5" title="Listing 2-6Configuring an NSMutableRequest object for a POST request"></a><p class="codesample clear"><strong class="caption_number">Listing 2-6</strong>&nbsp;&nbsp;Configuring an <code>NSMutableRequest</code> object for a POST request</p><div class="codesample clear"><table><tr><td scope="row"><pre>// In body data for the 'application/x-www-form-urlencoded' content type,<span></span></pre></td></tr><tr><td scope="row"><pre>// form fields are separated by an ampersand. Note the absence of a<span></span></pre></td></tr><tr><td scope="row"><pre>// leading ampersand.<span></span></pre></td></tr><tr><td scope="row"><pre>NSString *bodyData = @"name=Jane+Doe&amp;address=123+Main+St";<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>NSMutableURLRequest *postRequest = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://www.apple.com"]];<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>// Set the request's content type to application/x-www-form-urlencoded<span></span></pre></td></tr><tr><td scope="row"><pre>[postRequest setValue:@"application/x-www-form-urlencoded" forHTTPHeaderField:@"Content-Type"];<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>// Designate the request a POST request and specify its body data<span></span></pre></td></tr><tr><td scope="row"><pre>[postRequest setHTTPMethod:@"POST"];<span></span></pre></td></tr><tr><td scope="row"><pre>[postRequest setHTTPBody:[NSData dataWithBytes:[bodyData UTF8String] length:strlen([bodyData UTF8String])]];<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>// Initialize the NSURLConnection and proceed as described in<span></span></pre></td></tr><tr><td scope="row"><pre>// Retrieving the Contents of a URL<span></span></pre></td></tr></table></div><p>To specify a different content type for the request, use the <code><a href="../../../Reference/Foundation/Classes/NSMutableURLRequest_Class/index.html#//apple_ref/occ/instm/NSMutableURLRequest/setValue:forHTTPHeaderField:" data-renderer-version="1" target="_self">setValue:forHTTPHeaderField:</a></code> method. If you do, make sure your body data is properly formatted for that content type.</p><p>To obtain a progress estimate for a POST request, implement a <code><a href="../../../../Foundation/Reference/NSURLConnectionDataDelegate_protocol/index.html#//apple_ref/occ/intfm/NSURLConnectionDataDelegate/connection:didSendBodyData:totalBytesWritten:totalBytesExpectedToWrite:" data-renderer-version="1" target="_self">connection:didSendBodyData:totalBytesWritten:totalBytesExpectedToWrite:</a></code> method in the connection’s delegate. Note that this is not an exact measurement of upload progress, because the connection may fail or the connection may encounter an authentication challenge.</p></section><section><a name="//apple_ref/doc/uid/20001836-SW1" title="Retrieving Data Using a Completion Handler Block"></a><h2 class="jump">Retrieving Data Using a Completion Handler Block</h2><p>The <code>NSURLConnection</code> class provides support for retrieving the contents of a resource represented by an <code>NSURLRequest</code> object in a asynchronous manner and calling a block when results are returned or when an error or timeout occurs. To do this, call the class method <code><a href="../../../Reference/Foundation/Classes/NSURLConnection_Class/index.html#//apple_ref/occ/clm/NSURLConnection/sendAsynchronousRequest:queue:completionHandler:" data-renderer-version="1" target="_self">sendAsynchronousRequest:queue:completionHandler:</a></code>, providing the request object, a completion handler block, and an <code>NSOperation</code> queue on which that block should run. When the request completes or an error occurs, the URL loading system calls that block with the result data or error information.</p><p>If the request succeeds, the contents of the request are passed to the callback handler block as an <code><a href="../../../Reference/Foundation/Classes/NSData_Class/index.html#//apple_ref/occ/cl/NSData" data-renderer-version="1" target="_self">NSData</a></code> object and an <code><a href="../../../Reference/Foundation/Classes/NSURLResponse_Class/index.html#//apple_ref/occ/cl/NSURLResponse" data-renderer-version="1" target="_self">NSURLResponse</a></code> object for the request. If <code><a href="../../../Reference/Foundation/Classes/NSURLConnection_Class/index.html#//apple_ref/occ/cl/NSURLConnection" data-renderer-version="1" target="_self">NSURLConnection</a></code> is unable to retrieve the URL, an <code><a href="../../../Reference/Foundation/Classes/NSError_Class/index.html#//apple_ref/occ/cl/NSError" data-renderer-version="1" target="_self">NSError</a></code> object is passed as the third parameter.</p><div class="notebox"><aside><a name="//apple_ref/doc/uid/20001836-SW2" title="Note"></a><p><strong>Note:</strong>&nbsp;This method has two significant limitations:</p><p><ul class="ul"><li class="li"><p>Minimal support is provided for requests that require authentication. If the request requires authentication to make the connection, valid credentials must already be available in the <code><a href="../../../Reference/Foundation/Classes/NSURLCredentialStorage_Class/index.html#//apple_ref/occ/cl/NSURLCredentialStorage" data-renderer-version="1" target="_self">NSURLCredentialStorage</a></code> object or must be provided as part of the requested URL. If the credentials are not available or fail to authenticate, the URL loading system responds by sending the <code><a href="../../../Reference/Foundation/Classes/NSURLProtocol_Class/index.html#//apple_ref/occ/cl/NSURLProtocol" data-renderer-version="1" target="_self">NSURLProtocol</a></code> subclass handling the connection a <code>continueWithoutCredentialForAuthenticationChallenge:</code> message.</p></li><li class="li"><p>There is no means of modifying the default behavior of response caching or accepting server redirects. When a connection attempt encounters a server redirect, the redirect is always honored. Likewise, the response data is stored in the cache according to the default support provided by the protocol implementation.</p></li></ul>The <code>NSURLSession</code> class provides similar functionality without these limitations. For more information, read <span class="content_text"><a href="../Articles/UsingNSURLSession.html#//apple_ref/doc/uid/TP40013509-SW1" data-renderer-version="1">Using NSURLSession</a></span>.</p><p></p></aside></div></section><section><a name="//apple_ref/doc/uid/20001836-SW3" title="Retrieving Data Synchronously"></a><h2 class="jump">Retrieving Data Synchronously</h2><p>The <code>NSURLConnection</code> class provides support for retrieving the contents of a resource represented by an <code>NSURLRequest</code> object in a synchronous manner using the class method <code><a href="../../../Reference/Foundation/Classes/NSURLConnection_Class/index.html#//apple_ref/occ/clm/NSURLConnection/sendSynchronousRequest:returningResponse:error:" data-renderer-version="1" target="_self">sendSynchronousRequest:returningResponse:error:</a></code>. Using this method is not recommended, because it has severe limitations:</p><ul class="ul"><li class="li"><p>Unless you are writing a command-line tool, you must add additional code to ensure that the request does not run on your app’s main thread.</p></li><li class="li"><p>Minimal support is provided for requests that require authentication.</p></li><li class="li"><p>There is no means of modifying the default behavior of response caching or accepting server redirects.</p></li></ul><div class="importantbox clear"><aside><a name="//apple_ref/doc/uid/20001836-DontLinkElementID_10" title="Important"></a><p><strong>Important:</strong>&nbsp;If you retrieve data synchronously, you <em>must</em> ensure that the code in question can never run on your app’s main thread. Network operations can take an arbitrarily long time to complete. If you attempt to perform those network operations synchronously on the main thread, the operations would block your app’s execution until the data has been completely received, an error occurs, or the request times out. This causes a poor user experience, and can cause iOS to terminate your app.</p><p></p></aside></div><p>If the request succeeds, the contents of the request are returned as an <code><a href="../../../Reference/Foundation/Classes/NSData_Class/index.html#//apple_ref/occ/cl/NSData" data-renderer-version="1" target="_self">NSData</a></code> object and an <code><a href="../../../Reference/Foundation/Classes/NSURLResponse_Class/index.html#//apple_ref/occ/cl/NSURLResponse" data-renderer-version="1" target="_self">NSURLResponse</a></code> object for the request is returned by reference. If <code><a href="../../../Reference/Foundation/Classes/NSURLConnection_Class/index.html#//apple_ref/occ/cl/NSURLConnection" data-renderer-version="1" target="_self">NSURLConnection</a></code> is unable to retrieve the URL, the method returns <code>nil</code> and any available <code><a href="../../../Reference/Foundation/Classes/NSError_Class/index.html#//apple_ref/occ/cl/NSError" data-renderer-version="1" target="_self">NSError</a></code> instance by reference in the appropriate parameter.</p><p>If the request requires authentication to make the connection, valid credentials must already be available in the <code><a href="../../../Reference/Foundation/Classes/NSURLCredentialStorage_Class/index.html#//apple_ref/occ/cl/NSURLCredentialStorage" data-renderer-version="1" target="_self">NSURLCredentialStorage</a></code> object or must be provided as part of the requested URL. If the credentials are not available or fail to authenticate, the URL loading system responds by sending the <code><a href="../../../Reference/Foundation/Classes/NSURLProtocol_Class/index.html#//apple_ref/occ/cl/NSURLProtocol" data-renderer-version="1" target="_self">NSURLProtocol</a></code> subclass handling the connection a <code>continueWithoutCredentialForAuthenticationChallenge:</code> message.</p><p>When a synchronous connection attempt encounters a server redirect, the redirect is always honored. Likewise, the response data is stored in the cache according to the default support provided by the protocol implementation.</p></section>
        <div id="pageNavigationLinks_bottom" class="pageNavigationLinks">
            <a class='nextLink' rel='next' href='UsingNSURLDownload.html'>Next</a><a class='previousLink' rel='prev' href='../Articles/UsingNSURLSession.html'>Previous</a>
        </div><br/>
        <div class="copyright"><br/><hr /><div align="center"><p class="content_text" lang="en" dir="ltr"> Copyright &#x00a9; 2003, 2013 Apple Inc. All Rights Reserved. <a href="http://www.apple.com/legal/internet-services/terms/site.html" target="_blank">Terms of Use</a>   |  <a href="http://www.apple.com/privacy/" target="_blank">Privacy Policy</a>  |  Updated: 2013-10-22</p></div></div>

        <div id="pediaWindow">
            <div id="pediaHeader"></div>
            <div id="pediaBody"></div>
        </div>
    </article>

    <div id="blackout">
    <div id="preload"></div>
</div>
<div id="leave_feedback" class="button" role="button" tabindex="0">Feedback</div>
<div id="modal" aria-hidden="true">
    <div id="closebox" tabindex="0" aria-label="Close feedback form" role="button"></div>
    <div id="sending" class="hidden">
        <h2 tabindex="0">Sending feedback&hellip;</h2>
        <div id="sending_img"></div>
    </div>
    <div id="error" class="hidden">
        <h2 tabindex="0">We&rsquo;re sorry, an error has occurred.</h2>
        <p>Please try submitting your feedback later.</p>
        <div id="error_icon"></div>
    </div>
    <div id="success" class="hidden">
        <h2 tabindex="0">Thank you for providing feedback!</h2>
        <p>Your input helps improve our developer documentation.</p>
        <div id="thank_you_icon"></div>
    </div>
    
    <form id="feedback" action="#" method="post">
        <div class="left-leaf">
            <h2 id="helpful_title" data-asterisk="a1" tabindex="0">How helpful is this document?</h2>     
            <sup id="a1" class="asterisk" aria-hidden="true">*</sup>

            <div id="star_group" role="radiogroup" aria-required="true">
                <label> 
                    <input class="radio" type="radio" name="helped" value="1" /> 
                    Very helpful
                </label>
                <label> 
                    <input class="radio" type="radio" name="helped" value="2" /> 
                    Somewhat helpful
                </label>
                <label>
                    <input class="radio" type="radio" name="helped" value="3" /> 
                    Not helpful
                </label>
            </div>
        </div>
        <div class="right-leaf">
            <h2>How can we improve this document?</h2>
            <div id="improve" class="checkboxes">
                <label>
                    <input type="checkbox" name="typo" /> 
                    Fix typos or links
                </label>
                <label>
                    <input type="checkbox" name="infoIncorrect" /> 
                    Fix incorrect information
                </label>
                <label>
                    <input type="checkbox" name="needs_examples" /> 
                    Add or update code samples
                </label>
                <label>
                    <input type="checkbox" name="needs_art" /> 
                    Add or update illustrations
                </label>
                <label>
                    <input type="checkbox" name="missingInfo" /> 
                    Add information about...
                </label>
            </div>
        </div>

        <textarea id="comment" name="problem" cols="70" rows="8" placeholder="Please tell us more about your experience with this document" data-asterisk="a2" required></textarea>
        <sup id="a2" class="asterisk" aria-hidden="true">*</sup>

        <p class="fineprint">
            <em aria-hidden="true"><span>*</span> Required information</em>
        </p> 

        <input id="submit" type="button" value="Send" />

        <section id="legal">
            <p>
                To submit a product bug or enhancement request, please visit the 
                <a href="https://developer.apple.com/bugreporter/" target="_blank">Bug Reporter</a> 
                page.
            </p>
            <p>
                Please read <a href="http://www.apple.com/legal/policies/ideas.html" target="_blank">Apple's Unsolicited Idea Submission Policy</a> 
                before you send us your feedback.
            </p> 
        </section>
    </form>
</div>

    
    <script charset="utf-8" src="../../../../../Resources/1118/JavaScript/lib/prototype.js"></script>
    <script src="../../../../../Resources/1118/JavaScript/library.js"></script>
    <script src="../../../../../Resources/1118/JavaScript/feedback.js"></script>
</body>
<script type="text/javascript" src="/library/webstats/pagetracker.js"></script>
<script type="text/javascript">
if(typeof PageTracker !== 'undefined') {
  if(window.addEventListener) {
    window.addEventListener("load", function(){PageTracker.logPageLoad()},false);
  } else if(window.attachEvent) {
    window.attachEvent("onload",function(){PageTracker.logPageLoad()});
  }
}
</script>
</html>
