[
 {
  "file": "/Volumes/KINGSTON/LockheedMartin 2/Lockheed%20Martin/LMWisdomDataProvider.swift",
  "offset": 954,
  "remove": 3271,
  "text": "do {\n            request.HTTPBody = try NSJSONSerialization.dataWithJSONObject(params, options: [])\n        } catch var error as NSError {\n            err = error\n            request.HTTPBody = nil\n        }\n        request.addValue(\"application/json\", forHTTPHeaderField: \"Content-Type\")\n        request.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\n        \n        let PasswordString = \"\\(username):\\(password)\"\n        let PasswordData = PasswordString.dataUsingEncoding(NSUTF8StringEncoding)\n        let base64EncodedCredential = PasswordData!.base64EncodedStringWithOptions(NSDataBase64EncodingOptions.Encoding64CharacterLineLength)\n        \n        request.setValue(\"Basic \\(base64EncodedCredential)\", forHTTPHeaderField: \"Authorization\")\n        \n        var task = session.dataTaskWithRequest(request, completionHandler: {data, response, error -> Void in\n            print(\"Response: \\(response)\")\n            var strData = NSString(data: data, encoding: NSUTF8StringEncoding)\n            print(\"Body: \\(strData)\")\n            var err: NSError?\n            var json = NSJSONSerialization.JSONObjectWithData(data, options: .MutableLeaves) as? NSDictionary\n            \n            if(err != nil) {\n                print(err!.localizedDescription)\n                let jsonStr = NSString(data: data, encoding: NSUTF8StringEncoding)\n                print(\"Error could not parse JSON: '\\(jsonStr)'\")\n            }\n            else {\n                if let parseJSON = json {\n                    var success = parseJSON[\"success\"] as? Int\n                    print(\"Succes: \\(success)\")\n                }\n                else {\n                    let jsonStr = NSString(data: data, encoding: NSUTF8StringEncoding)\n                    print(\"Error could not parse JSON: \\(jsonStr)\")\n                }\n            }\n        })\n        \n        task.resume()\n        return true\n    }\n    \n    func getIssues(tenantId: String, title: String, description: String, vendorId: String, username: String, password: NSString) -> [Issue] {\n        \n        var urlString = \"https://www.lmwisdom.com/publisher-dev/api/vendors/\\(tenantId)/?cf_22=\\(description)&status_id=*\"\n        urlString = urlString.stringByAddingPercentEscapesUsingEncoding(NSUTF8StringEncoding)!\n        let url = NSURL(string: urlString)\n        \n        var issueArray = [Issue]()\n        \n        let PasswordString = \"\\(username):\\(password)\"\n        let PasswordData = PasswordString.dataUsingEncoding(NSUTF8StringEncoding)\n        let base64EncodedCredential = PasswordData!.base64EncodedStringWithOptions(NSDataBase64EncodingOptions.Encoding64CharacterLineLength)\n        \n        let request: NSMutableURLRequest = NSMutableURLRequest(URL: url!)\n        var session = NSURLSession.sharedSession()\n        request.setValue(\"Basic \\(base64EncodedCredential)\", forHTTPHeaderField: \"Authorization\")\n        request.HTTPMethod = \"GET\"\n        \n        let response: AutoreleasingUnsafeMutablePointer<NSURLResponse?>=nil\n        let data: NSData = try! NSURLConnection.sendSynchronousRequest(request, returningResponse: response)\n        var err: NSError\n        \n        print(\"\\(response)\")\n        \n        UIApplication.sharedApplication().networkActivityIndicatorVisible = false\n        if let json = (try? NSJSONSerialization.JSONObjectWithData(data, options:[])",
 }
]
