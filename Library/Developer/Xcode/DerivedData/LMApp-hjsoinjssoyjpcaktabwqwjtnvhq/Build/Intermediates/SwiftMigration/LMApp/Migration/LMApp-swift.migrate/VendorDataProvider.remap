[
 {
  "file": "/Volumes/KINGSTON/LockheedMartin 2/Lockheed%20Martin/VendorDataProvider.swift",
  "offset": 402,
  "remove": 2549,
  "text": "urlString: String) -> [VendorProfile]\n    {\n        \n        let url = NSURL(string: urlString)\n        var vendorArray = [VendorProfile]()\n        \n        let cache = Cache<NSString>(name: \"awesomeCache\")\n        cache.removeAllObjects()\n        cache.setObjectForKey(\"\\(url)\", cacheBlock: { success, failure in\n            // Perform tasks, e.g. call an API\n            \n            let request: NSMutableURLRequest = NSMutableURLRequest(URL: url!)\n            request.HTTPMethod = \"GET\"\n            \n            let response: AutoreleasingUnsafeMutablePointer<NSURLResponse?>=nil\n            let dataVal: NSData =  try! NSURLConnection.sendSynchronousRequest(request, returningResponse: response)\n            \n            let responseStr:NSString = NSString(data:dataVal, encoding:NSUTF8StringEncoding)!\n            \n            var err: NSError\n            let jsonResult: AnyObject! = try? NSJSONSerialization.JSONObjectWithData(dataVal, options: NSJSONReadingOptions.MutableContainers)\n            \n            if let vendorResults = jsonResult as? NSArray {\n                \n                var metaData: NSDictionary = (vendorResults[0] as AnyObject? as? NSDictionary)!\n                let vendors: NSArray = (vendorResults[1] as AnyObject? as? NSArray)!\n                \n                for vendor in vendors {\n                    \n                    let v = vendor as? NSDictionary\n                        \n                    let vendorProfile = VendorProfile(vendor: v!)\n                    \n                    vendorArray.append(vendorProfile)\n                }\n                \n            }\n            \n                success(responseStr, .Seconds(300)) // Cache response for 5 minutes\n            // ... or failure(error)\n            }, completion: { object, isLoadedFromCache, error in\n                if (object != nil) {\n                    // object is now cached\n                    if (vendorArray.count == 0)\n                    {\n                        let data = object?.dataUsingEncoding(NSUTF8StringEncoding)\n                        let jsonResult: AnyObject! = try? NSJSONSerialization.JSONObjectWithData(data!, options: NSJSONReadingOptions.MutableContainers)\n                    \n                        if let vendors = jsonResult as? NSArray {\n                        \n                            for vendor in vendors {\n                                \n                                let v = vendor as? NSDictionary\n                                \n                                let",
 }
]
